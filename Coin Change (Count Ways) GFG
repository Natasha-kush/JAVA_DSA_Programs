class Solution {
    public int count(int coins[], int sum) {
        // code here.
         int[] dp = new int[sum + 1];
        dp[0] = 1; // sum 0 banane ka ek hi tareeka: koi coin na lena

        for (int coin : coins) {
            for (int i = coin; i <= sum; i++) {
                dp[i] += dp[i - coin];
            }
        }

        return dp[sum];
    }
}
--------------------------------------------------------------------------------------------------------
Let's dry run the provided code with the given example where `coins = [1, 2, 3]` and `sum = 4`. The goal of this code is to find the number of ways to make change for the given `sum` using the provided `coins`.

### Initialization
1. We initialize an array `dp` of size `sum + 1` (which is 5 in this case) to store the number of ways to make each amount from `0` to `sum`.
2. We set `dp[0] = 1` because there is one way to make the sum of `0` (by using no coins).

### Initial State
```java
dp = [1, 0, 0, 0, 0]
```

### Iterating through Coins
Now we will iterate through each coin and update the `dp` array.

#### Coin = 1
- For `i = 1`: 
  - `dp[1] += dp[1 - 1]` → `dp[1] += dp[0]` → `dp[1] += 1` → `dp[1] = 1`
- For `i = 2`: 
  - `dp[2] += dp[2 - 1]` → `dp[2] += dp[1]` → `dp[2] += 1` → `dp[2] = 1`
- For `i = 3`: 
  - `dp[3] += dp[3 - 1]` → `dp[3] += dp[2]` → `dp[3] += 1` → `dp[3] = 1`
- For `i = 4`: 
  - `dp[4] += dp[4 - 1]` → `dp[4] += dp[3]` → `dp[4] += 1` → `dp[4] = 1`

After processing coin `1`, the `dp` array looks like this:
```java
dp = [1, 1, 1, 1, 1]
```

#### Coin = 2
- For `i = 2`: 
  - `dp[2] += dp[2 - 2]` → `dp[2] += dp[0]` → `dp[2] += 1` → `dp[2] = 2`
- For `i = 3`: 
  - `dp[3] += dp[3 - 2]` → `dp[3] += dp[1]` → `dp[3] += 1` → `dp[3] = 2`
- For `i = 4`: 
  - `dp[4] += dp[4 - 2]` → `dp[4] += dp[2]` → `dp[4] += 2` → `dp[4] = 3`

After processing coin `2`, the `dp` array looks like this:
```java
dp = [1, 1, 2, 2, 3]
```

#### Coin = 3
- For `i = 3`: 
  - `dp[3] += dp[3 - 3]` → `dp[3] += dp[0]` → `dp[3] += 1` → `dp[3] = 3`
- For `i = 4`: 
  - `dp[4] += dp[4 - 3]` → `dp[4] += dp[1]` → `dp[4] += 1` → `dp[4] = 4`

After processing coin `3`, the `dp` array looks like this:
```java
dp = [1, 1, 2, 3, 4]
```

### Final Result
The final value of `dp[sum]` (which is `dp[4]`) is `4`. This means there are 4 different ways to make the sum of `4` using the coins `[1, 2, 3]`.

### Summary of Ways
The 4 ways to make the sum of `4` are:
1. Four `1`s: (1, 1, 1, 1)
2. Two `1`s and one `2`: (1, 1, 2)
3. One `1` and one `3`: (1, 3)
4. Two `2`s: (2, 2)

Thus, the final output of the function will be `4`.
