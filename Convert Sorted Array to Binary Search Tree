class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
         if (nums == null || nums.length == 0)
            return null;

        return buildBST(nums, 0, nums.length - 1);
    }

     private TreeNode buildBST(int[] nums, int start, int end) {
        // Base case
        if (start > end)
            return null;

        // Find mid element to maintain balance
        int mid = start + (end - start) / 2;

        // Create node
        TreeNode node = new TreeNode(nums[mid]);

        // Build left and right subtrees recursively
        node.left = buildBST(nums, start, mid - 1);
        node.right = buildBST(nums, mid + 1, end);

        return node;
    }
}
