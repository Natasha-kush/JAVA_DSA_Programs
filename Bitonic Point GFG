class Solution {
    public int findMaximum(int[] arr) {
           int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Handle boundary cases
            if ((mid == 0 || arr[mid] > arr[mid - 1]) &&
                (mid == arr.length - 1 || arr[mid] > arr[mid + 1])) {
                return arr[mid]; // Bitonic point found
            }
            // If mid is part of increasing sequence, move right
            else if (mid < arr.length - 1 && arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            }
            // If mid is part of decreasing sequence, move left
            else {
                high = mid - 1;
            }
        }

        return -1; // Just a fallback, ideally should never reach here
    }
    
}
