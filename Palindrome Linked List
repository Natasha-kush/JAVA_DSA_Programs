
class Solution {
    public boolean isPalindrome(ListNode head) {
      if (head == null || head.next == null) return true;

        // Step 1: Find middle using slow and fast pointer
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse second half of the list
        ListNode secondStart = reverse(slow);

        // Step 3: Compare both halves
        ListNode firstStart = head;
        ListNode secondHalf = secondStart;
        while (secondHalfIter != null) {
            if (firstHalfStart.val != secondHalf.val) {
                return false;
            }
            firstStart = firstStart.next;
            secondHalf = secondHalf.next;

        return true;
    }
     // Helper to reverse linked list
    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}
