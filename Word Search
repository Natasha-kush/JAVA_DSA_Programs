class Solution {
    // Recursive function to check if the word exists
    public boolean exists(char[][] board, int i, int j, char[] word, int idx) {
        // Agar boundaries cross ho gayi ya character match nahi ho raha toh false return karo
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word[idx]) 
            return false;

        // Agar pura word match ho gaya toh true return karo
        if (idx == word.length - 1) 
            return true;

        // Current cell ko temporarily mark karte hain taaki dobara visit na ho
        char ch = board[i][j];
        board[i][j] = '*';

        // Recursively check adjacent cells
        boolean res = exists(board, i + 1, j, word, idx + 1) || // Neeche move karna
                      exists(board, i - 1, j, word, idx + 1) || // Upar move karna
                      exists(board, i, j + 1, word, idx + 1) || // Right move karna
                      exists(board, i, j - 1, word, idx + 1);   // Left move karna

        // Backtracking: Original value wapas rakhna
        board[i][j] = ch;
        return res;
    }

    public boolean exist(char[][] board, String word) {
        char[] wordarr = word.toCharArray();

        // Poore board ko traverse karenge
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                // Agar pehla character match karta hai toh recursion start karna
                if (board[i][j] == wordarr[0] && exists(board, i, j, wordarr, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
}
